<!doctype html>
<html lang="{{ metadata.language }}">
	<!--

____,  __, _, ____,    ____,   ____, ____,  ____,   ____, ____,  ____,
(-|    (-|__| (-|_,    (-/     (-/_| (-(__  (-/     (-/_| (-|  \ (-|_,
 _|,    _|  |, _|__,    _\__,  _/  |, ____)  _\__,  _/  |, _|__/  _|__,


-->

	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">
		{#- Atom and JSON feeds included by default #}
		<link rel="alternate" href="/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">
		<link rel="alternate" href="/feed.json" type="application/json" title="{{ metadata.title }}">
		{#-
		CSS bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. You can add to them using `{% css %}`
		2. You can get from them using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		3. You can do the same for JS: {% js %}{% endjs %} and <script>{% getBundle "js" %}</script>
		4. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}
		{#- Add an arbitrary string to the bundle #}
		{%- css %}* { box-sizing: border-box; }{% endcss %}
		{#- Add the contents of a file to the bundle #}
		{%- css %}{% include "public/css/reset.css" %}{% endcss %}
		{%- css %}{% include "public/css/fonts.css" %}{% endcss %}
		{%- css %}{% include "public/css/vars.css" %}{% endcss %}
		{%- css %}{% include "public/css/base.css" %}{% endcss %}
		{%- css %}{% include "public/css/sidebar.css" %}{% endcss %}
		{%- css %}{% include "public/css/entry.css" %}{% endcss %}
		{%- css %}{% include "public/css/header.css" %}{% endcss %}
		{%- css %}{% include "public/css/footer.css" %}{% endcss %}
		{%- css %}{% include "public/css/grid.css" %}{% endcss %}
		{%- css %}{% include "public/css/code.css" %}{% endcss %}
		{%- css %}{% include "public/css/yt-lite.css" %}{% endcss %}

		{%- css %}{% include "public/css/prism-diff.css" %}{%- endcss %}

		{#- Render the CSS bundle using Inlined CSS (for the fastest site performance in production) #}
		<style>
			{% getBundle "css" %}
		</style>
		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}
		<meta name="view-transition" content="same-origin"/>
		<!-- Open Graph Meta Tags -->
		<meta property="og:url" content="https://csscade.com">
		<meta property="og:type" content="website">
		<meta property="og:title" content="The Cascade">
		<meta property="og:description" content="A website about the past, present, and future of CSS.">
		<meta property="og:image" content="https://www.csscade.com/favicon/cascade.jpg">
		<meta property="og:image:width" content="2400">
		<meta property="og:image:height" content="1260">

		<!-- Twitter Meta Tags -->
		<meta name="twitter:card" content="summary_large_image">
		<meta property="twitter:domain" content="csscade.com">
		<meta property="twitter:url" content="https://csscade.com">
		<meta name="twitter:title" content="The Cascade">
		<meta name="twitter:description" content="A website about the past, present, and future of CSS.">
		<meta name="twitter:image" content="https://www.csscade.com/favicon/cascade.jpg">

		<meta
			name="twitter:image"
			content="https://www.csscade.com/favicon/cascade.jpg"
		/>

		<link
			rel="apple-touch-icon"
			sizes="180x180"
			href="/favicon/apple-touch-icon.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="32x32"
			href="/favicon/favicon-32x32.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="16x16"
			href="/favicon/favicon-16x16.png"
		/>
	</head>
	<body class="menu-closed">
		<a href="#skip" class="visually-hidden">Skip to main content</a>
		<header class="header">
			<a href="/" class="cascade-logo">
				<svg viewBox="0 0 456 391" fill="none" xmlns="http://www.w3.org/2000/svg">
					<rect width="456" height="391" rx="37" fill="#2A79DF"/>
					<g style="mix-blend-mode:hard-light">
						<rect width="218.542" height="194.144" rx="23" transform="matrix(0.913042 -0.407865 -0.885798 -0.46407 214.461 215.109)" fill="#D99172"/>
					</g>
					<g style="mix-blend-mode:hard-light">
						<rect width="218.542" height="194.144" rx="23" transform="matrix(0.913042 -0.407865 -0.885798 -0.46407 214.461 243.83)" fill="#D99172"/>
					</g>
					<g style="mix-blend-mode:hard-light">
						<rect width="218.542" height="194.144" rx="23" transform="matrix(0.913042 -0.407865 -0.885798 -0.46407 214.461 272.547)" fill="#D99172"/>
					</g>
					<g style="mix-blend-mode:hard-light">
						<rect width="218.542" height="194.144" rx="23" transform="matrix(0.913042 -0.407865 -0.885798 -0.46407 214.461 301.267)" fill="#D99172"/>
					</g>
					<g style="mix-blend-mode:hard-light">
						<rect width="218.542" height="194.144" rx="23" transform="matrix(0.913042 -0.407865 -0.885798 -0.46407 214.461 329.984)" fill="#D99172"/>
					</g>
					<g style="mix-blend-mode:hard-light">
						<rect width="218.542" height="194.144" rx="23" transform="matrix(0.913042 -0.407865 -0.885798 -0.46407 214.461 354.891)" fill="#D99172"/>
					</g>
					<g style="mix-blend-mode:hard-light">
						<rect width="218.542" height="194.144" rx="23" transform="matrix(0.913042 -0.407865 -0.885798 -0.46407 214.461 215.109)" fill="#D99172"/>
					</g>
				</svg>
			</a>
			<menu-btn>
				<button>
					<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" d="M4 18q-.425 0-.712-.288T3 17t.288-.712T4 16h16q.425 0 .713.288T21 17t-.288.713T20 18zm0-5q-.425 0-.712-.288T3 12t.288-.712T4 11h16q.425 0 .713.288T21 12t-.288.713T20 13zm0-5q-.425 0-.712-.288T3 7t.288-.712T4 6h16q.425 0 .713.288T21 7t-.288.713T20 8z"/></svg>
					About
				</button>
			</menu-btn>
		</header>
		<div class="container grid">
			<div class="popover-menu">
				<div class="popover-menu-wrapper">
					<div class="popover-menu-about">
						<p class="intro">
							<span>The Cascade</span> is a blog about the past, present, and future of CSS.
						</p>

						<p>Howdy‚Äî<a href="https://robinrendle.com">Robin Rendle</a> here.</p>

						<p>This blog keeps me in the loop with everything that‚Äôs possible with CSS lately but it‚Äôs also a reminder to celebrate the people doing the hard work building stuff for the web.</p>

						<p>You can subscribe to The Cascade via <a href="/feed.xml">RSS</a>, shoot me <a href="mailto:robinjrendle@gmail.com">an email</a> if you absolutely must, or <a href="href="https://mastodon.social/@csscade"">follow the feed</a>. This project is directly supported by readers and <a href="/membership">the membership program</a>.</p>

						<p>Right now the newsletter is taking a bit of a break whilst I figure out a healthy publishing cadence, but you can subscribe below:</p>

						<form
							action="https://buttondown.email/api/emails/embed-subscribe/cascade"
							method="post"
							target="popupwindow"
							onsubmit="window.open('https://buttondown.email/cascade', 'popupwindow')"
							class="signup"
						>
							<label class="visually-hidden" for="bd-email">Email</label>
							<input type="email" name="email" id="bd-email" placeholder="Email address" required/>
							<input type="submit" value="Subscribe"/>
						</form>
					</div>
				</div>
			</div>
			<main class="main" id="skip">
				{{ content | safe }}
			</main>
		</div>
		<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
		<script>
			class MenuBtn extends HTMLElement {
				connectedCallback() {
					this.addEventListener("click", function (e) {
						document.body.classList.toggle('menu-open');
					});
				}
			}
			customElements.define("menu-btn", MenuBtn);




			/**
			 * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.
			 *
			 * Thx to these as the inspiration
			 *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html
			 *   https://autoplay-youtube-player.glitch.me/
			 *
			 * Once built it, I also found these:
			 *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (üëçüëç)
			 *   https://github.com/Daugilas/lazyYT
			 *   https://github.com/vb/lazyframe
			 */
			class LiteYTEmbed extends HTMLElement {
					connectedCallback() {
							this.videoId = this.getAttribute('videoid');

							let playBtnEl = this.querySelector('.lty-playbtn');
							// A label for the button takes priority over a [playlabel] attribute on the custom-element
							this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';

							this.dataset.title = this.getAttribute('title') || "";

							/**
							 * Lo, the youtube poster image!  (aka the thumbnail, image placeholder, etc)
							 *
							 * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md
							 */
							if (!this.style.backgroundImage) {
								this.style.backgroundImage = `url("https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg")`;
								this.upgradePosterImage();
							}

							// Set up play button, and its visually hidden label
							if (!playBtnEl) {
									playBtnEl = document.createElement('button');
									playBtnEl.type = 'button';
									playBtnEl.classList.add('lty-playbtn');
									this.append(playBtnEl);
							}
							if (!playBtnEl.textContent) {
									const playBtnLabelEl = document.createElement('span');
									playBtnLabelEl.className = 'lyt-visually-hidden';
									playBtnLabelEl.textContent = this.playLabel;
									playBtnEl.append(playBtnLabelEl);
							}

							this.addNoscriptIframe();

							playBtnEl.removeAttribute('href');

							// On hover (or tap), warm up the TCP connections we're (likely) about to use.
							this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});

							// Once the user clicks, add the real iframe and drop our play button
							// TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time
							//   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003
							this.addEventListener('click', this.activate);

							// Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1
							// However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,
							// so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API
							// TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82
							this.needsYTApi = this.hasAttribute("js-api") || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');
					}

					/**
					 * Add a <link rel={preload | preconnect} ...> to the head
					 */
					static addPrefetch(kind, url, as) {
							const linkEl = document.createElement('link');
							linkEl.rel = kind;
							linkEl.href = url;
							if (as) {
									linkEl.as = as;
							}
							document.head.append(linkEl);
					}

					/**
					 * Begin pre-connecting to warm up the iframe load
					 * Since the embed's network requests load within its iframe,
					 *   preload/prefetch'ing them outside the iframe will only cause double-downloads.
					 * So, the best we can do is warm up a few connections to origins that are in the critical path.
					 *
					 * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267
					 * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.
					 */
					static warmConnections() {
							if (LiteYTEmbed.preconnected) return;

							// The iframe document and most of its subresources come right off youtube.com
							LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');
							// The botguard script is fetched off from google.com
							LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');

							// Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.
							LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');
							LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');

							LiteYTEmbed.preconnected = true;
					}

					fetchYTPlayerApi() {
							if (window.YT || (window.YT && window.YT.Player)) return;

							this.ytApiPromise = new Promise((res, rej) => {
									var el = document.createElement('script');
									el.src = 'https://www.youtube.com/iframe_api';
									el.async = true;
									el.onload = _ => {
											YT.ready(res);
									};
									el.onerror = rej;
									this.append(el);
							});
					}

					/** Return the YT Player API instance. (Public L-YT-E API) */
					async getYTPlayer() {
							if(!this.playerPromise) {
									await this.activate();
							}

							return this.playerPromise;
					}

					async addYTPlayerIframe() {
							this.fetchYTPlayerApi();
							await this.ytApiPromise;

							const videoPlaceholderEl = document.createElement('div')
							this.append(videoPlaceholderEl);

							const paramsObj = Object.fromEntries(this.getParams().entries());

							this.playerPromise = new Promise(resolve => {
									let player = new YT.Player(videoPlaceholderEl, {
											width: '100%',
											videoId: this.videoId,
											playerVars: paramsObj,
											events: {
													'onReady': event => {
															event.target.playVideo();
															resolve(player);
													}
											}
									});
							});
					}

					// Add the iframe within <noscript> for indexability discoverability. See https://github.com/paulirish/lite-youtube-embed/issues/105
					addNoscriptIframe() {
							const iframeEl = this.createBasicIframe();
							const noscriptEl = document.createElement('noscript');
							// Appending into noscript isn't equivalant for mysterious reasons: https://html.spec.whatwg.org/multipage/scripting.html#the-noscript-element
							noscriptEl.innerHTML = iframeEl.outerHTML;
							this.append(noscriptEl);
					}

					getParams() {
							const params = new URLSearchParams(this.getAttribute('params') || []);
							params.append('autoplay', '1');
							params.append('playsinline', '1');
							return params;
					}

					async activate(){
							if (this.classList.contains('lyt-activated')) return;
							this.classList.add('lyt-activated');

							if (this.needsYTApi) {
									return this.addYTPlayerIframe(this.getParams());
							}

							const iframeEl = this.createBasicIframe();
							this.append(iframeEl);

							// Set focus for a11y
							iframeEl.focus();
					}

					createBasicIframe(){
							const iframeEl = document.createElement('iframe');
							iframeEl.width = 560;
							iframeEl.height = 315;
							// No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include
							iframeEl.title = this.playLabel;
							iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';
							iframeEl.allowFullscreen = true;
							// AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL
							// https://stackoverflow.com/q/64959723/89484
							iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}`;
							return iframeEl;
					}

					/**
					 * In the spirit of the `lowsrc` attribute and progressive JPEGs, we'll upgrade the reliable
					 * poster image to a higher resolution one, if it's available.
					 * Interestingly this sddefault webp is often smaller in filesize, but we will still attempt it second
					 * because getting _an_ image in front of the user if our first priority.
					 *
					 * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md for more details
					 */
					upgradePosterImage() {
							 // Defer to reduce network contention.
							setTimeout(() => {
									const webpUrl = `https://i.ytimg.com/vi_webp/${this.videoId}/sddefault.webp`;
									const img = new Image();
									img.fetchPriority = 'low'; // low priority to reduce network contention
									img.referrerpolicy = 'origin'; // Not 100% sure it's needed, but https://github.com/ampproject/amphtml/pull/3940
									img.src = webpUrl;
									img.onload = e => {
											// A pretty ugly hack since onerror won't fire on YouTube image 404. This is (probably) due to
											// Youtube's style of returning data even with a 404 status. That data is a 120x90 placeholder image.
											// ‚Ä¶ per "annoying yt 404 behavior" in the .md
											const noAvailablePoster = e.target.naturalHeight == 90 && e.target.naturalWidth == 120;
											if (noAvailablePoster) return;

											this.style.backgroundImage = `url("${webpUrl}")`;
									}
							}, 100);
					}
			}
			// Register custom element
			customElements.define('lite-youtube', LiteYTEmbed);
		</script>
		<!-- This page was built on {% currentBuildDate %} -->
	</body>
</html>
